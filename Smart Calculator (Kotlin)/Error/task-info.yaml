type: edu
custom_name: Error!
files:
  - name: src/calculator/Main.kt
    visible: true
    text: |
      package calculator
      
      fun main() {
          println("Hello, World!")
      }
    learner_created: false
  - name: test/Test.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.Arrays;
      import java.util.List;
      
      public class Test extends StageTest<String> {
          @Override
          public List<TestCase<String>> generate() {
              return Arrays.asList(
                  new TestCase<String>().setDynamicTesting(() -> {
      
                      TestedProgram main = new TestedProgram();
      
                      // The base test suit that checks if the program
                      // correctly responses to the commands and can stop
                      main.start();
      
                      // test of /help
                      String output = main.execute("/help").trim();
                      if (output.length() < 4) {
                          return CheckResult.wrong(
                              "It seems like there was no any \"help\" message.");
                      }
      
                      // input empty string
                      output = main.execute("");
                      if (output.length() != 0) {
                          return CheckResult.wrong(
                              "Incorrect response to an empty string. " +
                              "The program should not print anything.");
                      }
      
                      // test of /exit
                      output = main.execute("/exit").trim().toLowerCase();
                      if (!output.startsWith("bye")) {
                          return CheckResult.wrong(
                              "Your program didn't print \"bye\" after entering \"/exit\".");
                      }
      
                      return new CheckResult(main.isFinished(),
                          "Your program should exit after entering \"/exit\".");
                  }),
      
                  new TestCase<String>().setDynamicTesting(() -> {
                      TestedProgram main = new TestedProgram();
      
                      // The test suit that checks functionality of the previous steps
                      main.start();
      
                      // sum of positive numbers
                      String output = main.execute("7 + 1 + 4").trim();
                      if (!output.equals("12")) {
                          return CheckResult.wrong("The program cannot sum more than two numbers.");
                      }
      
                      // sum mixed numbers & negative answer
                      output = main.execute("23 - 17 - 13").trim();
                      if (!output.equals("-7")) {
                          return CheckResult.wrong(
                              "Incorrect sum of positive and negative numbers.");
                      }
      
                      // testing a big amount of numbers
                      output = main.execute("33 + 21 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                      if (!output.equals("-2")) {
                          return CheckResult.wrong(
                              "The program cannot process a large number of numbers.");
                      }
      
                      // input one number
                      output = main.execute("101").trim();
                      if (!output.equals("101")) {
                          return CheckResult.wrong(
                              "The program printed not the same number that was entered " +
                              "(when one number is entered it is a valid expression).");
                      }
      
                      // input one negative number
                      output = main.execute("-302").trim();
                      if (!output.equals("-302")) {
                          return CheckResult.wrong(
                              "The program printed not the same number that was entered.");
                      }
      
                      // input empty string
                      output = main.execute("");
                      if (output.length() != 0) {
                          return CheckResult.wrong(
                              "Incorrect response to an empty string. " +
                              "The program should not print anything.");
                      }
      
                      // the sum of the numbers is zero
                      output = main.execute("10 - 7 - 3").trim();
                      if (!output.equals("0")) {
                          return CheckResult.wrong(
                              "The problem when sum is equal to 0 has occurred.");
                      }
      
                      // test of multiple operations
                      output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                      if (!output.equals("10")) {
                          return CheckResult.wrong(
                              "The program cannot process multiple operations " +
                                  "with several operators.");
                      }
      
                      // test of /exit
                      output = main.execute("/exit").trim().toLowerCase();
                      if (!output.startsWith("bye")) {
                          return CheckResult.wrong(
                              "Your program didn't print \"bye\" after entering \"/exit\".");
                      }
      
                      return new CheckResult(main.isFinished(),
                          "Your program should exit after entering \"/exit\".");
                  }),
      
                  new TestCase<String>().setDynamicTesting(() -> {
                      TestedProgram main = new TestedProgram();
      
                      // A set of positive tests for this step
                      main.start();
      
                      // tests of invalid expressions
                      String output = main.execute("123+").trim().toLowerCase();
                      if (!output.startsWith("invalid")) {
                          return CheckResult.wrong(
                              "The program cannot process an invalid expression.");
                      }
      
                      output = main.execute("321-").trim().toLowerCase();
                      if (!output.startsWith("invalid")) {
                          return CheckResult.wrong(
                              "The program cannot process an invalid expression.");
                      }
      
                      // input one number with plus in front of it
                      output = main.execute("+7").trim();
                      if (!output.equals("7")) {
                          return CheckResult.wrong(
                              "The program not correctly processes useless plus sign.");
                      }
      
                      // test of /exit
                      output = main.execute("/exit").trim().toLowerCase();
                      if (!output.startsWith("bye")) {
                          return CheckResult.wrong(
                              "Your program didn't print \"bye\" after entering \"/exit\".");
                      }
      
                      return new CheckResult(main.isFinished(),
                          "Your program should exit after entering \"/exit\".");
                  }),
                  new TestCase<String>().setDynamicTesting(() -> {
                      TestedProgram main = new TestedProgram();
      
                      // A set of negative tests for this step
                      main.start();
      
                      // test of entering not numbers
                      String output = main.execute("abc").trim().toLowerCase();
                      if (!output.startsWith("invalid")) {
                          return CheckResult.wrong(
                              "The program should print \"Invalid expression\" " +
                              "when not a numbers are entered");
                      }
      
                      output = main.execute("one + two + three").trim().toLowerCase();
                      if (!output.startsWith("invalid")) {
                          return CheckResult.wrong(
                              "The program should print \"Invalid expression\" " +
                              "when not a numbers are entered.");
                      }
      
                      // test of a nonexistent command
                      output = main.execute("/go").trim().toLowerCase();
                      if (!output.startsWith("unknown")) {
                          return CheckResult.wrong(
                              "The program should print \"Unknown command\" " +
                              "when a nonexistent command is entered.");
                      }
      
                      // test of /exit
                      output = main.execute("/exit").trim().toLowerCase();
                      if (!output.startsWith("bye")) {
                          return CheckResult.wrong(
                              "Your program didn't print \"bye\" after entering \"/exit\".");
                      }
      
                      return new CheckResult(main.isFinished(),
                          "Your program should exit after entering \"/exit\".");
                  })
              );
          }
      }
    learner_created: false
  - name: src/calculator/Parser.kt
    visible: true
    text: |-
      package calculator
      
      private fun Char.isPlus() = this == '+'
      private fun Char.isMinus() = this == '-'
      private fun Char.isOp() = isPlus() || isMinus()
      
      class Parser(s: String) {
      
          /** The string to parse */
          private val s = "$s "  // Add a space for the parser to properly finish its work
          /** The position where a token starts */
          private var startPos = -1
          /** The current index in the string */
          private var currPos = -1
          private var tokenType: TokenType = TokenType.Unknown
      
          private var _tokens = mutableListOf<CalcToken>()
          val tokens get() = _tokens.toList()
      
          fun parse() {
              while (++currPos < s.length) {
                  val c = s[currPos]
                  when (tokenType) {
                      TokenType.Unknown -> startToken(c)
                      else -> tokenInProgress(c)
                  }
              }
          }
      
          private fun startToken(c: Char) {
              startPos = currPos
              tokenType = tokenTypeByChar(c)
          }
      
          private fun finishToken() {
              val tStr = s.substring(startPos, currPos)
              _tokens += CalcToken.tokenFactory(tokenType, tStr)
              tokenType = TokenType.Unknown
          }
      
          private fun tokenTypeByChar(c: Char) = when {
              c.isDigit() -> TokenType.Num
              c.isOp() -> TokenType.Operator
              else/*c.isWhitespace()*/ -> TokenType.Unknown
          }
      
          private fun tokenInProgress(c: Char) {
              val charToken = tokenTypeByChar(c)
              if (tokenType != charToken) {
                  // Check for unary minus or any other unary operator
                  if (tokenType == TokenType.Operator && charToken == TokenType.Num
                      && (_tokens.isEmpty() || _tokens.last() is CalcToken.Operator)) {
                      tokenType = TokenType.Num
                  } else {
                      finishToken()
                      startToken(c)
                  }
              }
          }
      }
    learner_created: true
  - name: src/calculator/Solution.kt
    visible: true
    text: |-
      package calculator
      
      import java.util.LinkedList
      
      private val opMap = mapOf(
          "+" to {a: CalcToken.Number, b: CalcToken.Number -> CalcToken.Number(a.value + b.value)},
          "-" to {a: CalcToken.Number, b: CalcToken.Number -> CalcToken.Number(a.value - b.value)}
      )
      
      class Solution(val tokens: List<CalcToken>) {
          private val stack = LinkedList<CalcToken>()
          val postfix = mutableListOf<CalcToken>()
      
          private fun buildPostfix(): List<CalcToken> {
              tokens.forEach {
                  when (it) {
                      is CalcToken.Number -> postfix += it
                      is CalcToken.Operator -> {
                          while (/*stack.isNotEmpty() &&*/
                              operatorOfGreaterOrEqualPriorityIsOnTheStack(it.priority())) {
                              postfix += stack.pop()
                          }
                          stack.push(it)
                      }
                      // todo: cases when a token is a left or right parenthesis
                  }
              }
              while (stack.isNotEmpty()) postfix += stack.pop()
              return postfix.toList()
          }
      
          private fun operatorOfGreaterOrEqualPriorityIsOnTheStack(priority: Int): Boolean {
              val maxStackPriority = stack.filterIsInstance<CalcToken.Operator>().maxOfOrNull { it.priority() }
              return maxStackPriority != null && maxStackPriority >= priority
          }
      
          fun solve(): Int {
              buildPostfix()
              postfix.forEach {
                  when (it) {
                      is CalcToken.Number -> stack.push(it)
                      is CalcToken.Operator -> {
                          val second = stack.pop()!! as CalcToken.Number
                          val first = stack.pop()!! as CalcToken.Number
                          stack.push(opMap[it.value]!!(first, second))
                      }
                  }
              }
              return (stack.pop() as CalcToken.Number).value
          }
      }
    learner_created: true
  - name: src/calculator/CalcToken.kt
    visible: true
    text: |-
      package calculator
      
      abstract class CalcToken(val tStr: String) {
      
          class Number(s: String): CalcToken(s) {
              constructor(i: Int): this(i.toString())
              val value = tStr.toInt()
          }
          abstract class Operator(s: String): CalcToken(s) {
              abstract val value: String
              fun priority() = priorityMap[value]!!
              final override fun toString() = value
          }
          class Plus(s: String): Operator(s) {
              override val value = "+"
          }
          class Minus(s: String): Operator(s) {
              override val value = "-"
          }
      
          class Empty(s: String): CalcToken(s)
      
          override fun toString() = tStr
      
          companion object {
              /** Create a token based on the character type. */
              private fun plusToken(s: String) = Plus(s)
              private fun minusToken(s: String) = Minus(s)
      
              private val opMap = mapOf<Char, (String) -> CalcToken>(
                  '+' to ::plusToken,
                  '-' to ::minusToken
              )
      
              private val priorityMap = mapOf(
                  "(" to 1,
                  ")" to 1,
                  "-" to 2,
                  "+" to 2,
                  "/" to 3,
                  "*" to 3,
                  "^" to 4
              )
      
              fun tokenFactory(type: TokenType, tStr: String) = when (type) {
                  TokenType.Num -> Number(tStr)
                  TokenType.Operator -> {
                      checkOperatorUniformity(tStr)
                      if (tStr.first() == '-' && tStr.length % 2 == 0) Plus(tStr)
                      else opMap[tStr.first()]!!(tStr)
                  }
                  TokenType.Unknown -> Empty(tStr)
              }
      
              private fun checkOperatorUniformity(tStr: String) {
                  if (tStr.count { it == tStr.first() } != tStr.length)
                      throw IllegalArgumentException("Illegal argument for operator: $tStr")
              }
          }
      }
    learner_created: true
  - name: src/calculator/TokenType.kt
    visible: true
    text: |-
      package calculator
      
      enum class TokenType {
          Unknown,
          Num,
          Operator;
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7813#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 23 Oct 2023 14:09:56 UTC"
record: 5
